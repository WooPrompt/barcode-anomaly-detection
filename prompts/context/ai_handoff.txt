# AI HANDOFF - COMPLETE PROJECT CONTEXT [2025-07-15]

## PROJECT STATUS
Real-time barcode anomaly detection system OPERATIONAL. FastAPI backend with multi-anomaly detection deployed. Critical issues resolved: null value removal, multi-anomaly support, temporal disorder detection. System tested with real data and producing expected results.

## FRAMEWORKS DEVELOPED
1. **question_loop.llm.txt** - AI must ask clarifying questions before coding
2. **analysis_log_behavior.llm.txt** - Context accumulation and decision tracking  
3. **principle.llm.txt** - Project principles and environment setup
4. **automation system** - Session lifecycle management (init.json → work → ai_handoff.json)
5. **dynamic_question_protocol.llm.txt** - Automated question generation from task definitions
6. **DETAILED_LOGIC_EXPLANATION.md** - Comprehensive explanation of anomaly detection logic and scoring.

## KEY DECISIONS CHRONOLOGY
- 2025-07-10: Modularized detection into 5 standalone functions
- 2025-07-11: Statistical approach (Z-score) over pure rule-based
- 2025-07-12: Need automated testing for prompt framework effectiveness
- 2025-07-13: Built automation system with Meta→Templates→Tasks flow, created function-specific question.txt files, protocol documentation complete
- 2025-07-13: Detailed anomaly detection logic and scoring system documented in DETAILED_LOGIC_EXPLANATION.md.
- 2025-07-14: Detection modules, tests, and documentation committed (9a9b1d4)
- 2025-07-14: FastAPI server with Korean documentation, proper uvicorn setup completed (8dd1eef)
- 2025-07-15: Fixed FastAPI Pydantic model null values issue by removing response_model parameter
- 2025-07-15: Implemented multi-anomaly detection per event (one event can have multiple anomaly types)
- 2025-07-15: Fixed temporal disorder detection in evtOrderErr logic
- 2025-07-15: Corrected totalEvents calculation to count anomaly occurrences not event counts

## CURRENT CHALLENGE
Backend anomaly detection fully operational with correct multi-anomaly output. Recent fixes tested and verified. Ready for production integration and team handoff.

## USER WORKING STYLE
- Always ask clarifying questions first (use question_loop.llm.txt)
- Reference previous decisions (check analysis_log_behavior.llm.txt)
- Build incrementally with performance measurement
- Use English for technical, Korean for complex explanations
- Document decisions and commit milestones

## ESSENTIAL FILES TO LOAD
- @fastapi_server.py - Main API server (response_model removed for clean output)
- @src/barcode/multi_anomaly_detector.py - Multi-anomaly detection logic (lines 740-884)
- @docs/ANOMALY_DETECTION_ISSUES_ANALYSIS.md - Complete problem analysis and solutions
- @prompts/d.txt - Latest test cases and expected outputs
- @restart_server.bat - Server restart script for testing

## HOW TO START
1. Start FastAPI server: `uvicorn fastapi_server:app --host 0.0.0.0 --port 8000 --reload`
2. Test API: http://localhost:8000/docs (Korean documentation)
3. Apply question_loop protocol for any new task  
4. Keep token usage minimal, decisions measurable

## AUTOMATION WORKFLOW
- **Entry**: @prompts/automation/init.json (loads context, applies protocols, updates metadata)
- **Work**: Function generation in prompts/task/anomaly_detection/{type}/
- **Exit**: @prompts/automation/ai_handoff.json (updates this file, logs decisions)

**Magic phrase for new AI:** "Run @prompts/automation/init.json and then help me with [current task]"