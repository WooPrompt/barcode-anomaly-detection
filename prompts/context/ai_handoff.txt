# AI HANDOFF - COMPLETE PROJECT CONTEXT [2025-07-15]

## PROJECT STATUS
Real-time barcode anomaly detection system OPERATIONAL with advanced SVM preprocessing integration. FastAPI backend features both rule-based and SVM-based detection with sophisticated feature extraction, class imbalance handling, and comprehensive debugging capabilities. System addresses all feature extraction and performance issues identified in tt.txt.

## FRAMEWORKS DEVELOPED
1. **question_loop.llm.txt** - AI must ask clarifying questions before coding
2. **analysis_log_behavior.llm.txt** - Context accumulation and decision tracking  
3. **principle.llm.txt** - Project principles and environment setup
4. **automation system** - Session lifecycle management (init.json → work → ai_handoff.json)
5. **dynamic_question_protocol.llm.txt** - Automated question generation from task definitions
6. **DETAILED_LOGIC_EXPLANATION.md** - Comprehensive explanation of anomaly detection logic and scoring.

## KEY DECISIONS CHRONOLOGY
- 2025-07-10: Modularized detection into 5 standalone functions
- 2025-07-11: Statistical approach (Z-score) over pure rule-based
- 2025-07-12: Need automated testing for prompt framework effectiveness
- 2025-07-13: Built automation system with Meta→Templates→Tasks flow, created function-specific question.txt files, protocol documentation complete
- 2025-07-13: Detailed anomaly detection logic and scoring system documented in DETAILED_LOGIC_EXPLANATION.md.
- 2025-07-14: Detection modules, tests, and documentation committed (9a9b1d4)
- 2025-07-14: FastAPI server with Korean documentation, proper uvicorn setup completed (8dd1eef)
- 2025-07-15: Fixed FastAPI Pydantic model null values issue by removing response_model parameter
- 2025-07-15: Implemented multi-anomaly detection per event (one event can have multiple anomaly types)
- 2025-07-15: Fixed temporal disorder detection in evtOrderErr logic
- 2025-07-15: Corrected totalEvents calculation to count anomaly occurrences not event counts
- 2025-07-17: **SVM SYSTEM IMPLEMENTED** - Complete SVM-based anomaly detection system with CSV training pipeline
  - Created 5 independent One-Class SVM models for each anomaly type (epcFake, epcDup, locErr, evtOrderErr, jump)
  - Built memory-efficient CSV processing pipeline for large datasets (data/raw/*.csv)
  - Implemented FastAPI endpoint: POST /api/v1/barcode-anomaly-detect/svm
  - Fixed critical import issues: logging directory creation, Python path configuration, tqdm fallback
  - Architecture: CSV → Feature Extraction → 5 SVM Models → JSON API Response (<7sec requirement)
  - **MULTI-FILE PROCESSING**: Added support for multiple file_ids in single API request
    - Both SVM and rule-based detectors now process multiple file_ids automatically
    - API returns array format: `[{fileId: 3, ...}, {fileId: 1, ...}]` for multi-file requests
    - Single file requests maintain backward compatibility with object format
  - **CSV TRAINING OPTIMIZATION**: Modified training to use ALL 4 CSV files instead of 3/1 train/validation split
    - Merged icn.csv, kum.csv, ygs.csv, hws.csv for maximum training data (33% more data)
    - Removed validation split to focus all data on improving model performance
- 2025-07-17: **SVM PREPROCESSING INTEGRATION** - Integrated sophisticated svm_preprocessing pipeline into SVM system
  - Connected SVMPreprocessingPipeline with advanced feature extraction and validation
  - Added class imbalance handling (SMOTE), feature normalization, and comprehensive debugging
  - Fixed location_id/scan_location mapping and reduced SVM nu parameter to 0.05
  - Addresses all tt.txt issues: feature verification, class balance, parameter tuning, distribution analysis
- 2025-07-17: **API ENDPOINT UPDATE** - Updated FastAPI endpoints to match backend integration requirements
  - Main endpoint: POST /api/manager/export-and-analyze-async (rule-based detection)
  - SVM endpoint: POST /api/manager/export-and-analyze-async/svm (SVM-based detection)
  - Maintains backward compatibility with legacy endpoints
- 2025-07-17: **TT.TXT COMPLIANT EVALUATION SYSTEM** - Implemented scientific SVM evaluation following academic standards
  - Fixed preprocessing pipeline to split data BEFORE training (tt.txt requirement)
  - Added evaluate_svm_models() function comparing SVM vs rule-based ground truth
  - Created evaluation script: python evaluate_svm_models.py
  - Ensures no data leakage between training/evaluation sets for academic rigor
- 2025-07-18: **EPC GROUPBY LIMITATION ANALYSIS** - Identified core SVM performance issue
  - EPC groupby approach loses 90% temporal information through "minmax" aggregation
  - Current: 1,000 EPC sequences → 1,000 training samples (information loss)
  - Solution: Row-level processing → 15,000 individual events (information preservation)
  - Documented comprehensive development journey analysis in Korean

## CURRENT CHALLENGE
**SVM ZERO PERFORMANCE ISSUE**: All SVM models showing 0% performance across all metrics (precision, recall, F1-score). Need immediate investigation of: 1) Feature extraction effectiveness, 2) Label generation accuracy, 3) Model architecture suitability. EPC groupby approach identified as core limitation - produces "minmax" aggregated features losing 90% temporal information. Row-level multi-label SVM approach documented for next phase.

## USER WORKING STYLE
- Always ask clarifying questions first (use question_loop.llm.txt)
- Reference previous decisions (check analysis_log_behavior.llm.txt)
- Build incrementally with performance measurement
- Use English for technical, Korean for complex explanations
- Document decisions and commit milestones

## ESSENTIAL FILES TO LOAD
- @fastapi_server.py - Main API server (includes SVM endpoint /api/manager/export-and-analyze-async/svm)
- @src/barcode/multi_anomaly_detector.py - Rule-based multi-anomaly detection logic (lines 740-884)
- @src/barcode/svm_anomaly_detector.py - SVM-based detection system with 5 models
- @src/barcode/svm_csv_trainer.py - Training pipeline for large CSV datasets
- @evaluate_svm_models.py - Academic evaluation script (tt.txt compliant)
- @SVM_IMPLEMENTATION_GUIDE.md - Complete SVM system documentation
- @바코드_이상탐지_프로젝트_개발일지_종합분석.md - Complete 10-day development journey analysis
- @src/barcode/svm_preprocessing/feature_extractors/jump_features.py - EPC groupby features (sequence-level)
- @src/barcode/svm_preprocessing/feature_extractors/jump_features_event_level.py - Event-level features
- @src/barcode/svm_preprocessing/base_preprocessor.py - EPC groupby logic (lines 127-128)
- @row_level_svm_implementation_plan.txt - Future row-level SVM implementation plan

## HOW TO START
**For Rule-based Detection (Production Ready):**
1. Start FastAPI server: `uvicorn fastapi_server:app --host 0.0.0.0 --port 8000 --reload`
2. Test API: http://localhost:8000/docs (Korean documentation)
3. Use endpoint: POST /api/manager/export-and-analyze-async

**For SVM-based Detection (Training Required):**
1. Train models: `python train_svm_models.py` (using data/raw/*.csv)
2. Evaluate models: `python evaluate_svm_models.py` (tt.txt compliant validation)
3. Start FastAPI server: `python fastapi_server.py`
4. Use endpoint: POST /api/manager/export-and-analyze-async/svm
5. Apply question_loop protocol for any new task  
6. Keep token usage minimal, decisions measurable

**Critical Import Fix History:**
- Logging directory creation before configuration required
- Python path setup for cross-module imports
- tqdm fallback implementation for missing dependencies

## AUTOMATION WORKFLOW
- **Entry**: @prompts/automation/init.json (loads context, applies protocols, updates metadata)
- **Work**: Function generation in prompts/task/anomaly_detection/{type}/
- **Exit**: @prompts/automation/ai_handoff.json (updates this file, logs decisions)

**Magic phrase for new AI:** "Run @prompts/automation/init.json and then help me with [current task]"