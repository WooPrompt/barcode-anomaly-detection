{
  "task": "Rule-based anomaly detection modularization",
  "goal": "Enable independent benchmarking of rule-based anomaly detection functions to guide eventual ML replacement.",
  "load_context_files": [
    "principle.llm.txt"
  ],
  "protocol_context": [
    "prompts/question_loop.llm.txt",
    "prompts/Refactoring_Workflow.llm.txt"
  ],
  "requirements": {
    "structure": [
      "Apply all steps from question_loop.llm.txt",
      "Each anomaly rule must be separated into its own function.",
      "Modify only one file at a time."
    ],
    "code_style": [
      "Each function should be under 10 lines if possible.",
      "Use helpers if logic gets longer than 10 lines."
    ],
    "execution": [
      "Each function must be standalone callable.",
      "Each function must return runtime duration."
    ],
    "output_format": [
      "Return a list of dicts: { 'epc_code': str, 'anomaly': str, 'event_time': str or index }"
    ]
  },
  "related_files": [
    "src/barcode-anomaly-detection/anomaly_detection_v5.py"
  ],
  "output": {
    "functions": [
      "detect_jump_anomalies",
      "detect_evt_order_err",
      "detect_epc_fake",
      "detect_epc_dup",
      "detect_loc_err"
    ],
    "example_output": [
      {
        "epc_code": "001.8805843.2932031.150001.20250701.000000001",
        "anomaly": "evtOrderErr",
        "event_time": "2025-07-01 10:23:39"
      }
    ]
  },
  "benchmark": {
    "max_total_runtime_sec": 7,
    "per_function_target_sec": 1
  },
  "evaluation_criteria": [
    "Functions run independently and return valid output",
    "Runtime is logged or returned clearly",
    "Code is short and readable"
  ],
  "notes": [
    "Frontend needs which EPCs are anomalous and the exact scan event where the issue occurred.",
    "These rule functions will later serve as targets for ML models."
  ]
}
