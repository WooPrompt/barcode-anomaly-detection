# PROJECT INDEX - BARCODE ANOMALY DETECTION SYSTEM [2025-07-13]

## PROJECT OVERVIEW
Real-time barcode anomaly detection system using rule-based functions and ML models. Built with Python/FastAPI for API-driven supply chain monitoring.

## CURRENT STATUS
- 5 detection functions: epcFake, epcDup, locErr, evtOrderErr, jump (modularization target)
- Advanced prompt engineering framework implemented
- AI handoff system operational
- Next: Function separation + automated testing framework

## FOLDER STRUCTURE

```
barcode-anomaly-detection/
├── prompts/                    # AI interaction framework
│   ├── README.md              # Framework documentation
│   ├── context/               # WHAT the project is
│   │   ├── ai_handoff.txt     # Complete project context for AI
│   │   ├── principle.llm.txt  # Project goals, schema, environment
│   │   └── metadata.json      # Lineage tracking
│   ├── protocol/              # HOW AI should behave
│   │   ├── learning_v1.llm.txt          # Educational interaction style
│   │   ├── analysis_log_behavior.llm.txt # Decision tracking protocol
│   │   └── metadata.json                # Lineage tracking
│   ├── meta/                  # HOW to make prompts (prompt-for-prompt)
│   │   ├── automation_guide.txt # Meta-automation guidance
│   │   └── metadata.json        # Lineage tracking
│   ├── templates/             # REUSABLE patterns
│   │   └── metadata.json      # Lineage tracking
│   ├── task/                  # WHAT to execute (problem-solving)
│   │   ├── anomaly_detection/ # Current task: function modularization
│   │   │   ├── anomaly_detection.json    # Main task config
│   │   │   ├── edge.txt                  # Edge cases
│   │   │   ├── question_loop.llm.txt     # Systematic questioning
│   │   │   └── Refactoring_Workflow.llm.txt # Benchmarking workflow
│   │   ├── update_index.json  # Index maintenance automation
│   │   └── metadata.json      # Lineage tracking
│   └── log/                   # WHAT happened (conversation history)
│       ├── ai_handoff_maintenance.json
│       ├── ai_handoff_system_20250712.txt
│       ├── anomaly_detection_analysis_20250712.txt
│       └── metadata.json      # Lineage tracking
├── functions/ [PLANNED]        # Modularized detection functions
│   ├── epcFake/               # Fake EPC detection
│   ├── epcDup/                # Duplicate EPC detection
│   ├── locErr/                # Location error detection
│   ├── evtOrderErr/           # Event order error detection
│   └── jump/                  # Jump anomaly detection
├── command.json [PLANNED]      # Batch AI task execution system
└── index.llm.txt             # This file - project summary for AI consultation
```

## FUNCTION MODULE TEMPLATE [PLANNED]
Each function folder will contain:
- `[function_name].json` - AI prompt configuration
- `input.txt` - Sample input data
- `output.txt` - Expected output format
- `[function_name].py` - Generated code
- `instructions.md` - Code explanation and usage

## AI FRAMEWORK COMPONENTS

### Core Files for AI Sessions:
1. **context/ai_handoff.txt** - Load first for complete project context
2. **context/principle.llm.txt** - Project technical specifications
3. **task/anomaly_detection/question_loop.llm.txt** - Systematic task approach
4. **protocol/analysis_log_behavior.llm.txt** - Decision tracking protocol

### New Framework Features:
- **Metadata Lineage Tracking** - Every folder tracks creation, derivation, and evolution
- **Separation of Concerns** - Clear distinction between context, protocol, meta, templates, tasks
- **Automated Updates** - command.json system for metadata maintenance
- **Prompt Genealogy** - Track how prompts evolve from meta → templates → tasks

## KEY INNOVATIONS
1. **AI Handoff System** - Seamless context transfer between AI sessions
2. **Systematic Questioning** - Prevents assumptions through structured inquiry
3. **Persistent Knowledge** - Analysis logs accumulate project decisions
4. **Modular Prompts** - Reusable protocols for different task types
5. **Automation Framework** - Meta-patterns for creating new prompt systems

## USAGE FOR AI CONSULTATION
- **New AI Session**: Start with "Read @prompts/context/ai_handoff.txt and @index.llm.txt"
- **Specific Task**: Load relevant files from prompts/task/[task_name]/
- **Follow Protocols**: Apply prompts/protocol/learning_v1.llm.txt for educational interactions
- **Track Decisions**: Use prompts/protocol/analysis_log_behavior.llm.txt for persistence
- **Command Execution**: Run "@command.json" for automated task execution with metadata updates

## NEXT PRIORITIES
1. Function separation into modular structure
2. Command.json automation system
3. Automated testing framework
4. Performance measurement for prompt effectiveness

## FILE MAINTENANCE
This index.llm.txt is automatically updated via command.json to reflect current project state and structure changes.

Last Updated: 2025-07-13 by AI automation system (restructured with metadata lineage tracking)