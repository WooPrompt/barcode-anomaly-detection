# PROJECT INDEX - BARCODE ANOMALY DETECTION SYSTEM [2025-07-13]

## PROJECT OVERVIEW
Real-time barcode anomaly detection system using rule-based functions and ML models. Built with Python/FastAPI for API-driven supply chain monitoring.

## CURRENT STATUS
- 5 detection functions: epcFake, epcDup, locErr, evtOrderErr, jump (modularization target)
- Advanced prompt engineering framework implemented
- AI handoff system operational
- Next: Function separation + automated testing framework

## FOLDER STRUCTURE

```
barcode-anomaly-detection/
├── prompts/                    # AI interaction framework
│   ├── README.md              # Framework documentation
│   ├── ai_handoff.txt         # Complete project context for AI
│   ├── project/               # Static project context
│   │   └── principle.llm.txt  # Project goals, schema, environment
│   ├── protocol/              # AI behavior rules
│   │   ├── learning_v1.llm.txt          # Educational interaction style
│   │   └── analysis_log_behavior.llm.txt # Decision tracking protocol
│   ├── tasks/                 # Task-specific configurations
│   │   └── anomaly_detection/ # Current task: function modularization
│   │       ├── anomaly_detection.json    # Main task config
│   │       ├── edge.txt                  # Edge cases
│   │       ├── question_loop.llm.txt     # Systematic questioning
│   │       └── Refactoring_Workflow.llm.txt # Benchmarking workflow
│   ├── engineering/           # Meta-automation guidance
│   │   └── automation_guide.txt # How to create new prompt automations
│   └── log/                   # Conversation analysis history
│       ├── ai_handoff_maintenance.json
│       ├── ai_handoff_system_20250712.txt
│       └── anomaly_detection_analysis_20250712.txt
├── functions/ [PLANNED]        # Modularized detection functions
│   ├── epcFake/               # Fake EPC detection
│   ├── epcDup/                # Duplicate EPC detection
│   ├── locErr/                # Location error detection
│   ├── evtOrderErr/           # Event order error detection
│   └── jump/                  # Jump anomaly detection
├── command.json [PLANNED]      # Batch AI task execution system
└── index.llm.txt             # This file - project summary for AI consultation
```

## FUNCTION MODULE TEMPLATE [PLANNED]
Each function folder will contain:
- `[function_name].json` - AI prompt configuration
- `input.txt` - Sample input data
- `output.txt` - Expected output format
- `[function_name].py` - Generated code
- `instructions.md` - Code explanation and usage

## AI FRAMEWORK COMPONENTS

### Core Files for AI Sessions:
1. **ai_handoff.txt** - Load first for complete project context
2. **principle.llm.txt** - Project technical specifications
3. **question_loop.llm.txt** - Systematic task approach
4. **analysis_log_behavior.llm.txt** - Decision tracking protocol

### Automation Patterns:
- **Context Loading** - Automatic project context for new AI sessions
- **Protocol Application** - Consistent AI behavior across tasks
- **Decision Tracking** - Persistent knowledge through analysis logs
- **Command Batching** - JSON-driven task execution

## KEY INNOVATIONS
1. **AI Handoff System** - Seamless context transfer between AI sessions
2. **Systematic Questioning** - Prevents assumptions through structured inquiry
3. **Persistent Knowledge** - Analysis logs accumulate project decisions
4. **Modular Prompts** - Reusable protocols for different task types
5. **Automation Framework** - Meta-patterns for creating new prompt systems

## USAGE FOR AI CONSULTATION
- **New AI Session**: Start with "Read @ai_handoff.txt and @index.llm.txt"
- **Specific Task**: Load relevant files from prompts/tasks/[task_name]/
- **Follow Protocols**: Apply learning_v1.llm.txt for educational interactions
- **Track Decisions**: Use analysis_log_behavior.llm.txt for persistence

## NEXT PRIORITIES
1. Function separation into modular structure
2. Command.json automation system
3. Automated testing framework
4. Performance measurement for prompt effectiveness

## FILE MAINTENANCE
This index.llm.txt is automatically updated via command.json to reflect current project state and structure changes.

Last Updated: 2025-07-13 by AI automation system