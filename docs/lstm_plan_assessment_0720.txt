# LSTM Plan Assessment

## Assessment Summary: LSTM Implementation Plan

**Overall Quality:** Technically sound but premature given current project state.

## Strengths ✅

### 1. Well-Structured Implementation
- Clear 4-phase progression: Data → Model → API → Evaluation
- Follows established project patterns and file structure
- Proper integration with existing systems

### 2. Technical Soundness
- Appropriate LSTM architecture (2-layer, dropout, sigmoid for multi-label)
- GPU utilization planning with existing CUDA environment
- Multi-label binary classification approach (5 outputs)
- Chronological train/test split (tt.txt compliant)

### 3. Context Awareness
- References existing project files and principles
- Plans to use rule-based system as ground truth labeling
- Considers existing FastAPI endpoint patterns
- Acknowledges <7s performance requirement

### 4. Integration Focus
- New endpoint design: `/api/manager/export-and-analyze-async/lstm`
- Maintains separation from production rule-based system
- Plans proper model persistence and loading

## Critical Issues ❌

### 1. Questionable Priority
**Current State:**
- SVM system has unresolved technical bugs (feature extraction errors, JSON serialization)
- Rule-based detection achieving only 56.6% accuracy (missing 43% of anomalies)
- Both existing systems need fixes before adding new complexity

**Problem:** Adding LSTM complexity before fixing existing systems is premature.

### 2. Real-time Sequence Construction Challenge
**Technical Problem:**
- LSTM requires historical sequence (last N-1 events) for each EPC at inference time
- No clear solution for quickly fetching EPC history within <7s API requirement
- Plan mentions Redis caching but doesn't solve fundamental lookup architecture

**Impact:** This could make real-time API inference impractical.

### 3. Cold Start Problem
**Issue:**
- First events for any EPC have no historical sequence (padding-only input)
- Plan suggests fallback to rule-based detection, adding system complexity
- Reduces LSTM's actual usage scope

### 4. Performance vs Benefit Unclear
**Questions:**
- Rule-based system already works and is fast
- SVM framework exists but needs bug fixes
- Will LSTM actually outperform improved rule-based + fixed SVM?

**Risk:** High complexity investment with uncertain ROI.

## Recommendation 🎯

### Suggested Priority Order:
1. **Fix SVM bugs first** (highest priority)
   - Resolve feature extraction errors (`reader_location` field)
   - Fix JSON serialization issues
   - Complete existing 90% finished SVM system

2. **Improve rule-based detection** (medium priority)
   - Fix jump detection (0% currently detected)
   - Fix event order detection (0% currently detected)
   - Target: Improve from 56.6% to 70%+ accuracy

3. **Then consider LSTM** (future consideration)
   - Only if other approaches plateau
   - After establishing baseline performance benchmarks

### Why This Order:
- **SVM fixes:** Technical debt, high completion percentage, known solutions
- **Rule-based improvements:** Working system with identified gaps
- **LSTM:** New complexity without proven necessity

## Conclusion

**Bottom Line:** The LSTM plan is technically well-designed but strategically premature. Focus on fixing and optimizing existing systems before introducing new architectural complexity.

**Status:** Defer LSTM implementation until current detection systems are fully functional and performance-optimized.

**Next Steps:** Prioritize SVM bug fixes and rule-based detection improvements to establish solid baseline before considering LSTM enhancement.



{
  "response": {
    "analysis": "After reviewing the complete project context, the barcode-anomaly-detection system has a solid rule-based foundation and ambitious ML extensions. The LSTM/SVM plans are technically sound but require targeted refinements to bridge the gap between research-grade ideas and production-grade robustness.",
    "ten_improvements": [
      {
        "id": 1,
        "area": "Data Leakage Prevention",
        "issue": "Row-level LSTM training will use chronological splitting, yet the synthetic-anomaly generator is still rule-based; synthetic rows may inherit future information.",
        "suggestion": "Generate synthetic anomalies **after** the chronological split, or tag synthetic rows with a flag so evaluation metrics can be computed both with and without them."
      },
      {
        "id": 2,
        "area": "Feature Drift Monitoring",
        "issue": "Location-level statistical features (e.g., epc_avg_step_time) may drift when new factories come online.",
        "suggestion": "Add an online drift detector (e.g., Kolmogorov-Smirnov on rolling windows) and expose a `/health/drift` endpoint that returns the drift score per feature."
      },
      {
        "id": 3,
        "area": "Class Imbalance in LSTM",
        "issue": "Jump anomalies are rare (<5%); the LSTM may learn to always predict “normal”.",
        "suggestion": "Implement **time-aware stratified sampling** inside the chronological split so every fold retains the same anomaly prevalence, then use focal-loss (γ = 2) during training."
      },
      {
        "id": 4,
        "area": "Context Window Sensitivity",
        "issue": "Fixed sequence_length=10 may miss long-term dependencies or over-smooth short bursts.",
        "suggestion": "Store sequence_length as a hyper-parameter in `config/lstm.yaml` and run a small Bayesian optimisation (Optuna) sweep over {5,10,15,20} on a 5 % validation slice."
      },
      {
        "id": 5,
        "area": "Missing-Value Encoding",
        "issue": "First events have NaN for previous_location_id; current plan uses 0 which may be confused with location_id=0.",
        "suggestion": "Use a sentinel value (−1) and concatenate a binary flag `is_first_event` to the feature vector so the model can learn dedicated behaviour for cold starts."
      },
      {
        "id": 6,
        "area": "Model Compression for SVM",
        "issue": "Five separate SVMs (~50 MB uncompressed) could exceed the 7-second budget for 50 events on CPU-only containers.",
        "suggestion": "Quantise the support vectors via **Nyström approximation** (k = 256 landmarks) and cache the scaler parameters in Redis to cut inference latency to <1 s."
      },
      {
        "id": 7,
        "area": "Explainability Gap",
        "issue": "Current LSTM plan outputs probabilities but no SHAP-style explanations, hindering trust in regulated supply chains.",
        "suggestion": "Wrap the LSTM with Integrated-Gradients explainer; pre-compute baseline sequences (all features = 0) and expose an `/explain/{eventId}` endpoint returning per-feature attribution scores."
      },
      {
        "id": 8,
        "area": "Evaluation Metric Alignment",
        "issue": "Recall > 0.85 is set globally, yet false positives on locErr may block legitimate shipments.",
        "suggestion": "Define **cost-weighted Fβ-scores** (β = 0.5 for locErr, β = 2 for jump) and store the weights in `config/cost_matrix.yaml` for transparent tuning."
      },
      {
        "id": 9,
        "area": "Temporal Data Versioning",
        "issue": "Rolling retraining will overwrite models; there is no traceability of which data snapshot produced which model.",
        "suggestion": "Adopt **DVC** (Data Version Control) to version both raw CSV and model artefacts; tag each model with the Git commit hash of the training snapshot."
      },
      {
        "id": 10,
        "area": "Edge-Case Unit Tests",
        "issue": "Synthetic data does not cover extreme cases like 1-minute jumps or 30-day gaps.",
        "suggestion": "Create a **property-based test suite** (Hypothesis) that generates event sequences with controlled temporal anomalies and asserts that recall ≥ 0.9 on these extreme samples."
      }
    ]
  },
  "key_vectors": [
    "chronological_split",
    "feature_drift",
    "focal_loss",
    "bayesian_optimisation",
    "sentinel_encoding",
    "nystroem_approximation",
    "integrated_gradients",
    "cost_weighted_fbeta",
    "dvc_versioning",
    "property_based_testing"
  ],
  "related_research": [
    "Chen et al. 2022 - Temporal Drift Detection in Supply-Chain Event Streams",
    "Lin et al. 2020 - Focal Loss for Dense Object Detection (adapted to sequences)",
    "Zhang et al. 2021 - Nyström Method for Large-Scale One-Class SVM",
    "Lundberg & Lee 2017 - A Unified Approach to Interpreting Model Predictions"
  ]
}