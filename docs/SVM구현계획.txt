SVM 이상탐지 시스템 구현 - 한글 요약

1. Row-level SVM 구조
- 5개 이상유형별 각각 독립된 바이너리 SVM 모델 5개 사용
- 각 모델 출력은 확률 점수(0.0~1.0) 형태

2. 입출력 포맷
- API 입력은 현재 룰 기반 시스템과 동일한 JSON 포맷 사용
- 출력은 룰 기반 점수 대신 SVM 확률 점수로 대체
- API 경로는 /svm이 붙은 별도 엔드포인트 사용

3. 성능 요구사항
- 50개 행 처리 시 응답 시간 7초 이하 유지
- 7초 초과 시 정확도보다 응답 시간 우선

4. 학습 데이터 전략
- 룰 기반 탐지 결과를 레이블로 사용
- 사용자 피드백 기반 능동 학습은 없음

5. 피처 엔지니어링
- 이벤트별 피처에 앞 이벤트 1개 문맥 포함

6. 모델 배포 및 관리
- 모델 재학습 수동 진행
- 파일명에 학습 날짜 포함하여 버전 관리

7. 확률 보정
- 잘 보정된 확률 필요
- 불확실성 추정치 제공 안함

8. 멀티라벨 처리
- 이벤트 내 여러 이상 별 확률 독립 처리
- 이상 유형 상관분석 없음

9. 평가 지표 및 모니터링
- 중요 지표: Recall > Precision = F1 우선
- 평가 결과 날짜별 precision, recall, F1, specificity CSV 누적 기록

10. 통합 요구사항
- 기존 룰 기반 완전 대체 아닌, /api/.../svm 호출 시 SVM 작동
- A/B 테스트 없음

---

추가 구현 질문 요약

1. 학습 파이프라인
- 날짜 순 정렬 후 80% 학습, 20% 평가
- 이상 유형별 stratified sampling 적용
- SMOTE 적용 가능
- 정상 및 다양한 이상 유형 모두 학습

2. 피처 사양
- svm_preprocessing, svm_training, docs 폴더 최신 내용 확인 필요
- Z-score 정규화 사용

3. 이벤트 문맥
- 첫 이벤트 이전 문맥 없을 시 NaN 또는 0 처리 (합리적 판단)
- 이전 이벤트 피처는 location_id, business_step, event_time 등 특정 컬럼만 포함

4. SVM 파라미터
- nu = 0.05 고정 우선
- 자동 튜닝보단 고정 파라미터

5. 확률 매핑
- Sigmoid 함수로 0~1 확률 변환
- 임계값 0.5 기본, 조정 가능

6. 학습 볼륨 및 재학습
- 별도 배치 작업으로 재학습
- 최대 15,000개 이벤트 예상
- 현재 신규 데이터 자동 재학습 미적용

7. 모델 파일 관리
- 개별 .pkl 파일 5개 저장
- 파일명 svm_[이상유형]_YYYYMMDD.pkl

8. 에러 처리
- 모델 로드 실패 시 룰 기반 탐지로 fallback
- 이전 이벤트 피처 결측 시 결측 처리 또는 기본값 대체

9. 성능 모니터링
- 학습/예측 시간 기록 권장
- 메모리 사용량 추적은 옵션

10. API 응답
- 룰 기반과 동일 JSON 구조, 이상 확률 점수 포함
- 이상 없는 이벤트는 결과에서 제외
